import { useState } from "react";
import {
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  CircularProgress,
  Alert,
} from "@mui/material";
import axios from "axios";

const endpointMapping = {
  Notion: "notion",
  Airtable: "airtable",
  HubSpot: "hubspot",
};

export const DataForm = ({ integrationType, credentials }) => {
  const [loadedData, setLoadedData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const endpoint = endpointMapping[integrationType];

  const handleLoad = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const formData = new FormData();
      formData.append("credentials", JSON.stringify(credentials));
      const response = await axios.post(
        `http://localhost:8000/integrations/${endpoint}/load`,
        formData
      );
      const data = response.data;
      setLoadedData(data);
    } catch (e) {
      setError(e?.response?.data?.detail || "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    return new Date(dateString).toLocaleString();
  };

  return (
    <Box display="flex" flexDirection="column" width="100%" gap={2}>
      <Box display="flex" gap={2}>
        <Button
          onClick={handleLoad}
          variant="contained"
          disabled={isLoading}
          startIcon={
            isLoading ? <CircularProgress size={20} color="inherit" /> : null
          }
        >
          {isLoading ? "Loading..." : "Load Data"}
        </Button>
        <Button
          onClick={() => setLoadedData([])}
          variant="outlined"
          disabled={isLoading}
        >
          Clear Data
        </Button>
      </Box>

      {/* Most of this code generated by Claude */}
      {error && (
        <Alert severity="error" onClose={() => setError(null)}>
          {error}
        </Alert>
      )}
      {loadedData.length > 0 ? (
        <TableContainer component={Paper} sx={{ maxHeight: 440 }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>Name</TableCell>
                <TableCell>Type</TableCell>
                <TableCell>Directory</TableCell>
                <TableCell>Parent Id</TableCell>
                <TableCell>Parent Path or Name</TableCell>
                <TableCell>Created</TableCell>
                <TableCell>Modified</TableCell>
                <TableCell>URL</TableCell>
                <TableCell>Children</TableCell>
                <TableCell>Mime Type</TableCell>
                <TableCell>Delta</TableCell>
                <TableCell>Drive Id</TableCell>
                <TableCell>Visibility</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loadedData.map((item, index) => (
                <TableRow key={item.id || index}>
                  <TableCell>{item.id || "N/A"}</TableCell>
                  <TableCell>{item.name || "N/A"}</TableCell>
                  <TableCell>{item.type || "N/A"}</TableCell>
                  <TableCell>{item.directory ? "Yes" : "No"}</TableCell>
                  <TableCell>{item.parent_id || "N/A"}</TableCell>
                  <TableCell>{item.parent_path_or_name || "N/A"}</TableCell>
                  <TableCell>{formatDate(item.creation_time)}</TableCell>
                  <TableCell>{formatDate(item.last_modified_time)}</TableCell>
                  <TableCell>
                    {item.url ? (
                      <Button
                        href={item.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        variant="text"
                        size="small"
                      >
                        Link
                      </Button>
                    ) : (
                      "N/A"
                    )}
                  </TableCell>
                  <TableCell>{item.children || "N/A"}</TableCell>
                  <TableCell>{item.mime_type || "N/A"}</TableCell>
                  <TableCell>{item.delta || "N/A"}</TableCell>
                  <TableCell>{item.drive_id || "N/A"}</TableCell>
                  <TableCell>{item.visibility ? "Yes" : "No"}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      ) : (
        <Paper sx={{ p: 3, textAlign: "center", color: "text.secondary" }}>
          No data loaded. Click "Load Data" to fetch integration items.
        </Paper>
      )}
    </Box>
  );
};
